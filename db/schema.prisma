// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

enum FileType {
  COVENANTS
  MEETING_MINUTES
}

enum Role {
  ADMIN
  USER
}

enum TokenType {
  RESET_PASSWORD
}

model Covenant {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  title        String
  url          String
  height       Float
  width        Float
  cloudinaryId String
}

model Event {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String
  startsAt    DateTime
  endsAt      DateTime
}

model File {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fileName  String   @unique
  fileType  FileType
  key       String
  url       String
  bucket    String
}

model HomeImage {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  description  String
  url          String
  height       Float
  width        Float
  cloudinaryId String
}

model Image {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  description  String
  url          String
  height       Float
  width        Float
  cloudinaryId String

  trustees Trustee[]
}

model MeetingMinute {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  title        String
  url          String
  height       Float
  width        Float
  cloudinaryId String
}

model Session {
  id                 String    @id @default(uuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  userId             String?

  user User? @relation(fields: [userId], references: [id])
}

model Trustee {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  firstName   String
  lastName    String
  phoneNumber String
  duties      String[]
  imageId     String
  order       Int      @unique

  image Image @relation(fields: [imageId], references: [id])
}

model Token {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String
  userId      String

  user User @relation(fields: [userId], references: [id])

  @@unique([hashedToken, type])
}

model User {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           Role     @default(USER)

  tokens   Token[]
  sessions Session[]
}
